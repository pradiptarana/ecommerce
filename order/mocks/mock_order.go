// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pradiptarana/order/repository (interfaces: OrderRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	order "github.com/pradiptarana/order/model/order"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockOrderRepository) AddToCart(arg0 *order.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockOrderRepositoryMockRecorder) AddToCart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockOrderRepository)(nil).AddToCart), arg0)
}

// CreateOrder mocks base method.
func (m *MockOrderRepository) CreateOrder(arg0 *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepositoryMockRecorder) CreateOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrder), arg0)
}

// GetCart mocks base method.
func (m *MockOrderRepository) GetCart(arg0 int) (*order.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", arg0)
	ret0, _ := ret[0].(*order.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockOrderRepositoryMockRecorder) GetCart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockOrderRepository)(nil).GetCart), arg0)
}

// GetCurrentCart mocks base method.
func (m *MockOrderRepository) GetCurrentCart(arg0 int) (*order.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentCart", arg0)
	ret0, _ := ret[0].(*order.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentCart indicates an expected call of GetCurrentCart.
func (mr *MockOrderRepositoryMockRecorder) GetCurrentCart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentCart", reflect.TypeOf((*MockOrderRepository)(nil).GetCurrentCart), arg0)
}

// GetOrderHistory mocks base method.
func (m *MockOrderRepository) GetOrderHistory(arg0 *order.GetOrderHistoryFilter) ([]*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderHistory", arg0)
	ret0, _ := ret[0].([]*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderHistory indicates an expected call of GetOrderHistory.
func (mr *MockOrderRepositoryMockRecorder) GetOrderHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderHistory", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderHistory), arg0)
}

// UpdateCart mocks base method.
func (m *MockOrderRepository) UpdateCart(arg0 *order.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCart", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCart indicates an expected call of UpdateCart.
func (mr *MockOrderRepositoryMockRecorder) UpdateCart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCart", reflect.TypeOf((*MockOrderRepository)(nil).UpdateCart), arg0)
}
